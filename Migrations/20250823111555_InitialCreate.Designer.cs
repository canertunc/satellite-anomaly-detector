// <auto-generated />
using System;
using AnomalyDetectionApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnomalyDetectionApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250823111555_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnomalyDetectionApp.Models.TelemetryLabeled", b =>
                {
                    b.Property<float>("Segment")
                        .HasColumnType("real")
                        .HasColumnName("segment");

                    b.Property<float>("Anomaly")
                        .HasColumnType("real")
                        .HasColumnName("anomaly");

                    b.Property<float>("Diff2_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("diff2_peaks");

                    b.Property<float>("Diff2_Var")
                        .HasColumnType("real")
                        .HasColumnName("diff2_var");

                    b.Property<float>("Diff_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("diff_peaks");

                    b.Property<float>("Diff_Var")
                        .HasColumnType("real")
                        .HasColumnName("diff_var");

                    b.Property<float>("Duration")
                        .HasColumnType("real")
                        .HasColumnName("duration");

                    b.Property<float>("Gaps_Squared")
                        .HasColumnType("real")
                        .HasColumnName("gaps_squared");

                    b.Property<float>("Kurtosis")
                        .HasColumnType("real")
                        .HasColumnName("kurtosis");

                    b.Property<float>("Len")
                        .HasColumnType("real")
                        .HasColumnName("len");

                    b.Property<float>("Len_Weighted")
                        .HasColumnType("real")
                        .HasColumnName("len_weighted");

                    b.Property<float>("Mean")
                        .HasColumnType("real")
                        .HasColumnName("mean");

                    b.Property<float>("N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("n_peaks");

                    b.Property<float>("Skew")
                        .HasColumnType("real")
                        .HasColumnName("skew");

                    b.Property<float>("Smooth10_N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("smooth10_n_peaks");

                    b.Property<float>("Smooth20_N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("smooth20_n_peaks");

                    b.Property<float>("Std")
                        .HasColumnType("real")
                        .HasColumnName("std");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<float>("Var")
                        .HasColumnType("real")
                        .HasColumnName("var");

                    b.Property<float>("Var_Div_Duration")
                        .HasColumnType("real")
                        .HasColumnName("var_div_duration");

                    b.Property<float>("Var_Div_Len")
                        .HasColumnType("real")
                        .HasColumnName("var_div_len");

                    b.HasKey("Segment");

                    b.ToTable("TelemetyLabeleds");
                });

            modelBuilder.Entity("AnomalyDetectionApp.Models.TelemetryRaw", b =>
                {
                    b.Property<float>("Segment")
                        .HasColumnType("real")
                        .HasColumnName("segment");

                    b.Property<float>("Diff2_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("diff2_peaks");

                    b.Property<float>("Diff2_Var")
                        .HasColumnType("real")
                        .HasColumnName("diff2_var");

                    b.Property<float>("Diff_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("diff_peaks");

                    b.Property<float>("Diff_Var")
                        .HasColumnType("real")
                        .HasColumnName("diff_var");

                    b.Property<float>("Duration")
                        .HasColumnType("real")
                        .HasColumnName("duration");

                    b.Property<float>("Gaps_Squared")
                        .HasColumnType("real")
                        .HasColumnName("gaps_squared");

                    b.Property<float>("Kurtosis")
                        .HasColumnType("real")
                        .HasColumnName("kurtosis");

                    b.Property<float>("Len")
                        .HasColumnType("real")
                        .HasColumnName("len");

                    b.Property<float>("Len_Weighted")
                        .HasColumnType("real")
                        .HasColumnName("len_weighted");

                    b.Property<float>("Mean")
                        .HasColumnType("real")
                        .HasColumnName("mean");

                    b.Property<float>("N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("n_peaks");

                    b.Property<float>("Skew")
                        .HasColumnType("real")
                        .HasColumnName("skew");

                    b.Property<float>("Smooth10_N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("smooth10_n_peaks");

                    b.Property<float>("Smooth20_N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("smooth20_n_peaks");

                    b.Property<float>("Std")
                        .HasColumnType("real")
                        .HasColumnName("std");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<float>("Var")
                        .HasColumnType("real")
                        .HasColumnName("var");

                    b.Property<float>("Var_Div_Duration")
                        .HasColumnType("real")
                        .HasColumnName("var_div_duration");

                    b.Property<float>("Var_Div_Len")
                        .HasColumnType("real")
                        .HasColumnName("var_div_len");

                    b.HasKey("Segment");

                    b.ToTable("TelemetryRaws");
                });

            modelBuilder.Entity("AnomalyDetectionApp.Models.TelemetryTraining", b =>
                {
                    b.Property<float>("Segment")
                        .HasColumnType("real")
                        .HasColumnName("segment");

                    b.Property<float>("Anomaly")
                        .HasColumnType("real")
                        .HasColumnName("anomaly");

                    b.Property<float>("Diff2_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("diff2_peaks");

                    b.Property<float>("Diff2_Var")
                        .HasColumnType("real")
                        .HasColumnName("diff2_var");

                    b.Property<float>("Diff_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("diff_peaks");

                    b.Property<float>("Diff_Var")
                        .HasColumnType("real")
                        .HasColumnName("diff_var");

                    b.Property<float>("Duration")
                        .HasColumnType("real")
                        .HasColumnName("duration");

                    b.Property<float>("Gaps_Squared")
                        .HasColumnType("real")
                        .HasColumnName("gaps_squared");

                    b.Property<float>("Kurtosis")
                        .HasColumnType("real")
                        .HasColumnName("kurtosis");

                    b.Property<float>("Len")
                        .HasColumnType("real")
                        .HasColumnName("len");

                    b.Property<float>("Len_Weighted")
                        .HasColumnType("real")
                        .HasColumnName("len_weighted");

                    b.Property<float>("Mean")
                        .HasColumnType("real")
                        .HasColumnName("mean");

                    b.Property<float>("N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("n_peaks");

                    b.Property<float>("Skew")
                        .HasColumnType("real")
                        .HasColumnName("skew");

                    b.Property<float>("Smooth10_N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("smooth10_n_peaks");

                    b.Property<float>("Smooth20_N_Peaks")
                        .HasColumnType("real")
                        .HasColumnName("smooth20_n_peaks");

                    b.Property<float>("Std")
                        .HasColumnType("real")
                        .HasColumnName("std");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<float>("Var")
                        .HasColumnType("real")
                        .HasColumnName("var");

                    b.Property<float>("Var_Div_Duration")
                        .HasColumnType("real")
                        .HasColumnName("var_div_duration");

                    b.Property<float>("Var_Div_Len")
                        .HasColumnType("real")
                        .HasColumnName("var_div_len");

                    b.HasKey("Segment");

                    b.ToTable("TelemetyTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
